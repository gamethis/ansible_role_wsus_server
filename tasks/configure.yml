---
- name: Create content folder
  win_file:
    path: "{{ content_folder }}"
    state: directory

- name: Set content folder in WSUS
  win_command: 'WsusUtil.exe postinstall CONTENT_DIR={{ content_folder }}'
  args:
    chdir: 'C:\Program Files\Update Services\Tools'
    creates: "{{ content_folder }}\\WSUSContent"

- name: Get current enabled languages in WSUS
  win_shell: |
    $wsuscfg = (Get-WsusServer).GetConfiguration()
    [PSCustomObject]@{
      'AllUpdateLanguagesEnabled' = $wsuscfg.AllUpdateLanguagesEnabled
      'EnabledUpdateLanguages'    = @($wsuscfg.GetEnabledUpdateLanguages())
    } | ConvertTo-Json
  register: _currentwsuslanguages_command
  changed_when: false

- name: Parse current enabled languages from JSON
  set_fact:
    _currentwsuslanguages: "{{ _currentwsuslanguages_command.stdout | from_json() }}"

- name: Set update languages
  win_shell: |
    [array]$languages = ConvertFrom-Json -InputObject '{{ wsus_languages | flatten(levels=1) | to_json(ensure_ascii=False) }}'
    $wsusconfig = (Get-WsusServer).GetConfiguration()
    $wsusconfig.AllUpdateLanguagesEnabled = $false
    $wsusconfig.SetEnabledUpdateLanguages($languages)
    $wsusconfig.Save()
  when: _currentwsuslanguages.EnabledUpdateLanguages | symmetric_difference(wsus_languages) | length > 0 or
        _currentwsuslanguages.AllUpdateLanguagesEnabled

- name: Set WSUS to synchronise from Microsoft Update
  win_shell: |
    Set-WsusServerSynchronization -SyncFromMU

- name: Configure Proxy for WSUS Server
  win_shell: |
    $wsus = Get-WSUSServer
    $wsusConfig = $wsus.GetConfiguration()
    $wsusConfig.ProxyName = "{{ wsus_proxy }}"
    $wsusConfig.ProxyServerPort = "{{ wsus_proxy_port }}"
    $wsusConfig.UseProxy = $True
    $wsusConfig.AnonymousProxyAccess = $True
    $wsusConfig.Save()
  when:
    - use_proxy
    - wsus_proxy is defined
    - wsus_proxy_port is defined

- name: Get Synchronization Source State
  win_shell: |
    (Get-WsusServer).GetConfiguration().SyncFromMicrosoftUpdate
  register: wsus_sync_source_state_raw

- name: Get Last Sync Year
  win_shell: |
    (Get-WsusServer).GetSubscription().LastModifiedTime.Year
  register: wsus_last_sync_year_raw

- name: Do initial synchronization to get latest categories
  win_shell: |
    $wsussubscription = (Get-WSUSServer).GetSubscription()
    $wsussubscription.StartSynchronizationForCategoryOnly()

- name: Wait for synchronization to complete
  win_shell: |
    $wsus = Get-WSUSServer
    $subscription = $wsus.GetSubscription()
    if ($subscription.GetSynchronizationStatus() -ne 'NotProcessing'){
      $subscription.GetSynchronizationStatus()
      exit 1
    }
    $subscription.GetSynchronizationStatus()
    exit 0
  register: sync
  until: sync.rc == 0
  retries: 1000
  delay: 60
  ignore_errors: true

- name: Disable all classifications
  win_shell: |
    Get-WsusClassification | Set-WsusClassification -Disable

- name: Set classifications -> loop
  win_shell: |
    Get-WsusClassification | Where-Object -FilterScript {$_.Classification.Title -Eq "{{ item }}"} | Set-WsusClassification
  loop: "{{ classification_list|flatten(levels=1) }}"

- name: Disable All Products
  win_shell: |
    Get-WsusProduct | Set-WsusProduct -Disable

- name: Set products to synchronise -> loop
  win_shell: |
    Get-WSUSProduct | Where-Object -FilterScript {$_.product.title -eq "{{ item }}" } | Set-WsusProduct
  loop: "{{ products_list|flatten(levels=1) }}"

- name: Enable Synchronization at Midnight every day
  win_shell: |
    $wsussubscription = (Get-WSUSServer).GetSubscription()
    $wsussubscription.SynchronizeAutomatically=$true
    $wsussubscription.SynchronizeAutomaticallyTimeOfDay= (New-TimeSpan -Hours 0)
    $wsussubscription.NumberOfSynchronizationsPerDay=1
    $wsussubscription.Save()

- name: Enable automatic approval rule
  win_shell: |
    $automatic_approval_rule = (Get-WsusServer).GetInstallApprovalRules() | Where {$_.Name -Eq "Default Automatic Approval Rule"}
    $automatic_approval_rule.Enabled = $True
    $automatic_approval_rule.Save()
    $automatic_approval_rule.ApplyRule()
